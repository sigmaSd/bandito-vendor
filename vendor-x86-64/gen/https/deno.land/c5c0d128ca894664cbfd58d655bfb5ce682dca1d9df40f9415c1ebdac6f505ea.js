// Copyright 2018-2024 the Deno authors. All rights reserved. MIT license.
// This module is browser compatible.
// // For future forward-compatibility with regexp `v` flag, reservedCharMap is
// // autogenerated from the ClassSetReservedDoublePunctuator,
// // ClassSetSyntaxCharacter, and ClassSetReservedPunctuator categories in the
// // draft spec.
// // See https://github.com/tc39/proposal-regexp-v-flag#how-is-the-v-flag-different-from-the-u-flag
// // and https://arai-a.github.io/ecma262-compare/snapshot.html?pr=2418#prod-ClassSetReservedDoublePunctuator
// const reservedChars = [...new Set(['ClassSetReservedDoublePunctuator', 'ClassSetSyntaxCharacter', 'ClassSetReservedPunctuator'].map(n =>
//   document.querySelector(`[name=${n}] emu-rhs`).textContent.replaceAll(/\s/g, '')
// ).join(''))]
// const reservedCharMap = Object.fromEntries(reservedChars
//   .map(x => {
//     try {
//       for (const flag of 'gimsuy') {
//         new RegExp(`\\${x}`, flag)
//         new RegExp(`[\\${x}]`, flag)
//       }
//       return [x, `\\${x}`]
//     } catch (e) {
//       return [x, `\\x${x.codePointAt(0).toString(16).padStart(2, '0')}`]
//     }
//   }))
const reservedCharMap = {
  "&": "\\x26",
  "!": "\\x21",
  "#": "\\x23",
  "$": "\\$",
  "%": "\\x25",
  "*": "\\*",
  "+": "\\+",
  ",": "\\x2c",
  ".": "\\.",
  ":": "\\x3a",
  ";": "\\x3b",
  "<": "\\x3c",
  "=": "\\x3d",
  ">": "\\x3e",
  "?": "\\?",
  "@": "\\x40",
  "^": "\\^",
  "`": "\\x60",
  "~": "\\x7e",
  "(": "\\(",
  ")": "\\)",
  "[": "\\[",
  "]": "\\]",
  "{": "\\{",
  "}": "\\}",
  "/": "\\/",
  "-": "\\x2d",
  "\\": "\\\\",
  "|": "\\|"
};
const RX_REGEXP_ESCAPE = new RegExp(`[${Object.values(reservedCharMap).join("")}]`, "gu");
/**
 * Escapes arbitrary text for interpolation into a regexp, such that it will
 * match exactly that text and nothing else.
 *
 * @example
 * ```ts
 * import { escape } from "https://deno.land/std@$STD_VERSION/regexp/mod.ts";
 * import { assertEquals, assertMatch, assertNotMatch } from "https://deno.land/std@$STD_VERSION/assert/mod.ts";
 *
 * const re = new RegExp(`^${escape(".")}$`, "u");
 *
 * assertEquals("^\\.$", re.source);
 * assertMatch(".", re);
 * assertNotMatch("a", re);
 * ```
 */ export function escape(str) {
  return str.replaceAll(RX_REGEXP_ESCAPE, (m)=>reservedCharMap[m]);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3N0ZEAwLjIxNi4wL3JlZ2V4cC9lc2NhcGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyNCB0aGUgRGVubyBhdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLiBNSVQgbGljZW5zZS5cbi8vIFRoaXMgbW9kdWxlIGlzIGJyb3dzZXIgY29tcGF0aWJsZS5cblxuLy8gLy8gRm9yIGZ1dHVyZSBmb3J3YXJkLWNvbXBhdGliaWxpdHkgd2l0aCByZWdleHAgYHZgIGZsYWcsIHJlc2VydmVkQ2hhck1hcCBpc1xuLy8gLy8gYXV0b2dlbmVyYXRlZCBmcm9tIHRoZSBDbGFzc1NldFJlc2VydmVkRG91YmxlUHVuY3R1YXRvcixcbi8vIC8vIENsYXNzU2V0U3ludGF4Q2hhcmFjdGVyLCBhbmQgQ2xhc3NTZXRSZXNlcnZlZFB1bmN0dWF0b3IgY2F0ZWdvcmllcyBpbiB0aGVcbi8vIC8vIGRyYWZ0IHNwZWMuXG4vLyAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtcmVnZXhwLXYtZmxhZyNob3ctaXMtdGhlLXYtZmxhZy1kaWZmZXJlbnQtZnJvbS10aGUtdS1mbGFnXG4vLyAvLyBhbmQgaHR0cHM6Ly9hcmFpLWEuZ2l0aHViLmlvL2VjbWEyNjItY29tcGFyZS9zbmFwc2hvdC5odG1sP3ByPTI0MTgjcHJvZC1DbGFzc1NldFJlc2VydmVkRG91YmxlUHVuY3R1YXRvclxuLy8gY29uc3QgcmVzZXJ2ZWRDaGFycyA9IFsuLi5uZXcgU2V0KFsnQ2xhc3NTZXRSZXNlcnZlZERvdWJsZVB1bmN0dWF0b3InLCAnQ2xhc3NTZXRTeW50YXhDaGFyYWN0ZXInLCAnQ2xhc3NTZXRSZXNlcnZlZFB1bmN0dWF0b3InXS5tYXAobiA9PlxuLy8gICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBbbmFtZT0ke259XSBlbXUtcmhzYCkudGV4dENvbnRlbnQucmVwbGFjZUFsbCgvXFxzL2csICcnKVxuLy8gKS5qb2luKCcnKSldXG4vLyBjb25zdCByZXNlcnZlZENoYXJNYXAgPSBPYmplY3QuZnJvbUVudHJpZXMocmVzZXJ2ZWRDaGFyc1xuLy8gICAubWFwKHggPT4ge1xuLy8gICAgIHRyeSB7XG4vLyAgICAgICBmb3IgKGNvbnN0IGZsYWcgb2YgJ2dpbXN1eScpIHtcbi8vICAgICAgICAgbmV3IFJlZ0V4cChgXFxcXCR7eH1gLCBmbGFnKVxuLy8gICAgICAgICBuZXcgUmVnRXhwKGBbXFxcXCR7eH1dYCwgZmxhZylcbi8vICAgICAgIH1cbi8vICAgICAgIHJldHVybiBbeCwgYFxcXFwke3h9YF1cbi8vICAgICB9IGNhdGNoIChlKSB7XG4vLyAgICAgICByZXR1cm4gW3gsIGBcXFxceCR7eC5jb2RlUG9pbnRBdCgwKS50b1N0cmluZygxNikucGFkU3RhcnQoMiwgJzAnKX1gXVxuLy8gICAgIH1cbi8vICAgfSkpXG5cbmNvbnN0IHJlc2VydmVkQ2hhck1hcCA9IHtcbiAgXCImXCI6IFwiXFxcXHgyNlwiLFxuICBcIiFcIjogXCJcXFxceDIxXCIsXG4gIFwiI1wiOiBcIlxcXFx4MjNcIixcbiAgXCIkXCI6IFwiXFxcXCRcIixcbiAgXCIlXCI6IFwiXFxcXHgyNVwiLFxuICBcIipcIjogXCJcXFxcKlwiLFxuICBcIitcIjogXCJcXFxcK1wiLFxuICBcIixcIjogXCJcXFxceDJjXCIsXG4gIFwiLlwiOiBcIlxcXFwuXCIsXG4gIFwiOlwiOiBcIlxcXFx4M2FcIixcbiAgXCI7XCI6IFwiXFxcXHgzYlwiLFxuICBcIjxcIjogXCJcXFxceDNjXCIsXG4gIFwiPVwiOiBcIlxcXFx4M2RcIixcbiAgXCI+XCI6IFwiXFxcXHgzZVwiLFxuICBcIj9cIjogXCJcXFxcP1wiLFxuICBcIkBcIjogXCJcXFxceDQwXCIsXG4gIFwiXlwiOiBcIlxcXFxeXCIsXG4gIFwiYFwiOiBcIlxcXFx4NjBcIixcbiAgXCJ+XCI6IFwiXFxcXHg3ZVwiLFxuICBcIihcIjogXCJcXFxcKFwiLFxuICBcIilcIjogXCJcXFxcKVwiLFxuICBcIltcIjogXCJcXFxcW1wiLFxuICBcIl1cIjogXCJcXFxcXVwiLFxuICBcIntcIjogXCJcXFxce1wiLFxuICBcIn1cIjogXCJcXFxcfVwiLFxuICBcIi9cIjogXCJcXFxcL1wiLFxuICBcIi1cIjogXCJcXFxceDJkXCIsXG4gIFwiXFxcXFwiOiBcIlxcXFxcXFxcXCIsXG4gIFwifFwiOiBcIlxcXFx8XCIsXG59O1xuXG5jb25zdCBSWF9SRUdFWFBfRVNDQVBFID0gbmV3IFJlZ0V4cChcbiAgYFske09iamVjdC52YWx1ZXMocmVzZXJ2ZWRDaGFyTWFwKS5qb2luKFwiXCIpfV1gLFxuICBcImd1XCIsXG4pO1xuXG4vKipcbiAqIEVzY2FwZXMgYXJiaXRyYXJ5IHRleHQgZm9yIGludGVycG9sYXRpb24gaW50byBhIHJlZ2V4cCwgc3VjaCB0aGF0IGl0IHdpbGxcbiAqIG1hdGNoIGV4YWN0bHkgdGhhdCB0ZXh0IGFuZCBub3RoaW5nIGVsc2UuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBlc2NhcGUgfSBmcm9tIFwiaHR0cHM6Ly9kZW5vLmxhbmQvc3RkQCRTVERfVkVSU0lPTi9yZWdleHAvbW9kLnRzXCI7XG4gKiBpbXBvcnQgeyBhc3NlcnRFcXVhbHMsIGFzc2VydE1hdGNoLCBhc3NlcnROb3RNYXRjaCB9IGZyb20gXCJodHRwczovL2Rlbm8ubGFuZC9zdGRAJFNURF9WRVJTSU9OL2Fzc2VydC9tb2QudHNcIjtcbiAqXG4gKiBjb25zdCByZSA9IG5ldyBSZWdFeHAoYF4ke2VzY2FwZShcIi5cIil9JGAsIFwidVwiKTtcbiAqXG4gKiBhc3NlcnRFcXVhbHMoXCJeXFxcXC4kXCIsIHJlLnNvdXJjZSk7XG4gKiBhc3NlcnRNYXRjaChcIi5cIiwgcmUpO1xuICogYXNzZXJ0Tm90TWF0Y2goXCJhXCIsIHJlKTtcbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gZXNjYXBlKHN0cjogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlQWxsKFxuICAgIFJYX1JFR0VYUF9FU0NBUEUsXG4gICAgKG0pID0+IHJlc2VydmVkQ2hhck1hcFttIGFzIGtleW9mIHR5cGVvZiByZXNlcnZlZENoYXJNYXBdLFxuICApO1xufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDBFQUEwRTtBQUMxRSxxQ0FBcUM7QUFFckMsK0VBQStFO0FBQy9FLDhEQUE4RDtBQUM5RCwrRUFBK0U7QUFDL0UsaUJBQWlCO0FBQ2pCLG9HQUFvRztBQUNwRyw4R0FBOEc7QUFDOUcsMklBQTJJO0FBQzNJLG9GQUFvRjtBQUNwRixlQUFlO0FBQ2YsMkRBQTJEO0FBQzNELGdCQUFnQjtBQUNoQixZQUFZO0FBQ1osdUNBQXVDO0FBQ3ZDLHFDQUFxQztBQUNyQyx1Q0FBdUM7QUFDdkMsVUFBVTtBQUNWLDZCQUE2QjtBQUM3QixvQkFBb0I7QUFDcEIsMkVBQTJFO0FBQzNFLFFBQVE7QUFDUixRQUFRO0FBRVIsTUFBTSxrQkFBa0I7RUFDdEIsS0FBSztFQUNMLEtBQUs7RUFDTCxLQUFLO0VBQ0wsS0FBSztFQUNMLEtBQUs7RUFDTCxLQUFLO0VBQ0wsS0FBSztFQUNMLEtBQUs7RUFDTCxLQUFLO0VBQ0wsS0FBSztFQUNMLEtBQUs7RUFDTCxLQUFLO0VBQ0wsS0FBSztFQUNMLEtBQUs7RUFDTCxLQUFLO0VBQ0wsS0FBSztFQUNMLEtBQUs7RUFDTCxLQUFLO0VBQ0wsS0FBSztFQUNMLEtBQUs7RUFDTCxLQUFLO0VBQ0wsS0FBSztFQUNMLEtBQUs7RUFDTCxLQUFLO0VBQ0wsS0FBSztFQUNMLEtBQUs7RUFDTCxLQUFLO0VBQ0wsTUFBTTtFQUNOLEtBQUs7QUFDUDtBQUVBLE1BQU0sbUJBQW1CLElBQUksT0FDM0IsQ0FBQyxDQUFDLEVBQUUsT0FBTyxNQUFNLENBQUMsaUJBQWlCLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUM5QztBQUdGOzs7Ozs7Ozs7Ozs7Ozs7Q0FlQyxHQUNELE9BQU8sU0FBUyxPQUFPLEdBQVc7RUFDaEMsT0FBTyxJQUFJLFVBQVUsQ0FDbkIsa0JBQ0EsQ0FBQyxJQUFNLGVBQWUsQ0FBQyxFQUFrQztBQUU3RCJ9
// denoCacheMetadata=4125852143627866687,11850799714003292135