import { setRenderState } from "./preact_hooks.ts";
import { renderToString } from "../deps.ts";
import { Fragment, h, isValidElement, toChildArray } from "preact";
import { HEAD_CONTEXT } from "../../runtime/head.ts";
import { CSP_CONTEXT } from "../../runtime/csp.ts";
import { withBase } from "../router.ts";
export function renderHtml(state) {
  setRenderState(state);
  state.renderingUserTemplate = true;
  state.headChildren = false;
  const componentStack = state.componentStack;
  try {
    const routeComponent = componentStack[componentStack.length - 1];
    let finalComp = h(routeComponent, state.routeOptions);
    // Skip page component
    let i = componentStack.length - 1;
    while(i--){
      const component = componentStack[i];
      const curComp = finalComp;
      finalComp = h(component, {
        ...state.routeOptions,
        Component () {
          return curComp;
        }
      });
    }
    const app = h(CSP_CONTEXT.Provider, // deno-lint-ignore no-explicit-any
    {
      value: state.csp
    }, h(HEAD_CONTEXT.Provider, {
      value: state.headVNodes,
      children: finalComp
    }));
    let html = renderToString(app);
    for (const [id, children] of state.slots.entries()){
      const slotHtml = renderToString(h(Fragment, null, children));
      const templateId = id.replace(/:/g, "-");
      html += `<template id="${templateId}">${slotHtml}</template>`;
    }
    return html;
  } finally{
    setRenderState(null);
  }
}
export function renderOuterDocument(state, opts) {
  const { docHtml, docHead, renderedHtmlTag, docBody, docHeadNodes, headVNodes } = state;
  let docTitle = state.docTitle;
  // Filter out duplicate head vnodes by "key" if set
  const filteredHeadNodes = [];
  if (headVNodes.length > 0) {
    const seen = new Map();
    const userChildren = toChildArray(headVNodes);
    for(let i = 0; i < userChildren.length; i++){
      const child = userChildren[i];
      if (isValidElement(child)) {
        if (child.type === "title") {
          docTitle = child;
        } else if (child.key !== undefined) {
          seen.set(child.key, child);
        } else {
          filteredHeadNodes.push(child);
        }
      }
    }
    if (seen.size > 0) {
      filteredHeadNodes.push(...seen.values());
    }
  }
  const page = h("html", docHtml ?? {
    lang: opts.lang
  }, h("head", docHead, !renderedHtmlTag ? h("meta", {
    charset: "utf-8"
  }) : null, !renderedHtmlTag ? h("meta", {
    name: "viewport",
    content: "width=device-width, initial-scale=1.0"
  }) : null, docTitle, docHeadNodes.map((node)=>h(node.type, node.props)), opts.preloads.map((src)=>h("link", {
      rel: "modulepreload",
      href: withBase(src, state.basePath)
    })), opts.moduleScripts.map(([src, nonce])=>h("script", {
      src: withBase(src, state.basePath),
      nonce,
      type: "module"
    })), filteredHeadNodes), h("body", {
    ...docBody,
    dangerouslySetInnerHTML: {
      __html: opts.bodyHtml
    }
  }));
  try {
    setRenderState(state);
    return "<!DOCTYPE html>" + renderToString(page);
  } finally{
    setRenderState(null);
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvZnJlc2hAMS42Ljgvc3JjL3NlcnZlci9yZW5kZXJpbmcvdGVtcGxhdGUudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlbmRlclN0YXRlIH0gZnJvbSBcIi4vc3RhdGUudHNcIjtcbmltcG9ydCB7IHNldFJlbmRlclN0YXRlIH0gZnJvbSBcIi4vcHJlYWN0X2hvb2tzLnRzXCI7XG5pbXBvcnQgeyByZW5kZXJUb1N0cmluZyB9IGZyb20gXCIuLi9kZXBzLnRzXCI7XG5pbXBvcnQge1xuICBDb21wb25lbnRUeXBlLFxuICBGcmFnbWVudCxcbiAgaCxcbiAgaXNWYWxpZEVsZW1lbnQsXG4gIHRvQ2hpbGRBcnJheSxcbiAgVk5vZGUsXG59IGZyb20gXCJwcmVhY3RcIjtcbmltcG9ydCB7IEhFQURfQ09OVEVYVCB9IGZyb20gXCIuLi8uLi9ydW50aW1lL2hlYWQudHNcIjtcbmltcG9ydCB7IENTUF9DT05URVhUIH0gZnJvbSBcIi4uLy4uL3J1bnRpbWUvY3NwLnRzXCI7XG5pbXBvcnQgeyB3aXRoQmFzZSB9IGZyb20gXCIuLi9yb3V0ZXIudHNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlckh0bWwoc3RhdGU6IFJlbmRlclN0YXRlKSB7XG4gIHNldFJlbmRlclN0YXRlKHN0YXRlKTtcbiAgc3RhdGUucmVuZGVyaW5nVXNlclRlbXBsYXRlID0gdHJ1ZTtcbiAgc3RhdGUuaGVhZENoaWxkcmVuID0gZmFsc2U7XG5cbiAgY29uc3QgY29tcG9uZW50U3RhY2sgPSBzdGF0ZS5jb21wb25lbnRTdGFjaztcbiAgdHJ5IHtcbiAgICBjb25zdCByb3V0ZUNvbXBvbmVudCA9IGNvbXBvbmVudFN0YWNrW2NvbXBvbmVudFN0YWNrLmxlbmd0aCAtIDFdO1xuICAgIGxldCBmaW5hbENvbXAgPSBoKHJvdXRlQ29tcG9uZW50LCBzdGF0ZS5yb3V0ZU9wdGlvbnMpIGFzIFZOb2RlO1xuXG4gICAgLy8gU2tpcCBwYWdlIGNvbXBvbmVudFxuICAgIGxldCBpID0gY29tcG9uZW50U3RhY2subGVuZ3RoIC0gMTtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBjb25zdCBjb21wb25lbnQgPSBjb21wb25lbnRTdGFja1tpXSBhcyBDb21wb25lbnRUeXBlO1xuICAgICAgY29uc3QgY3VyQ29tcCA9IGZpbmFsQ29tcDtcblxuICAgICAgZmluYWxDb21wID0gaChjb21wb25lbnQsIHtcbiAgICAgICAgLi4uc3RhdGUucm91dGVPcHRpb25zLFxuICAgICAgICBDb21wb25lbnQoKSB7XG4gICAgICAgICAgcmV0dXJuIGN1ckNvbXA7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIGRlbm8tbGludC1pZ25vcmUgbm8tZXhwbGljaXQtYW55XG4gICAgICB9IGFzIGFueSkgYXMgVk5vZGU7XG4gICAgfVxuXG4gICAgY29uc3QgYXBwID0gaChcbiAgICAgIENTUF9DT05URVhULlByb3ZpZGVyLFxuICAgICAgLy8gZGVuby1saW50LWlnbm9yZSBuby1leHBsaWNpdC1hbnlcbiAgICAgIHsgdmFsdWU6IHN0YXRlLmNzcCB9IGFzIGFueSxcbiAgICAgIGgoSEVBRF9DT05URVhULlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBzdGF0ZS5oZWFkVk5vZGVzLFxuICAgICAgICBjaGlsZHJlbjogZmluYWxDb21wLFxuICAgICAgfSksXG4gICAgKSBhcyBWTm9kZTtcblxuICAgIGxldCBodG1sID0gcmVuZGVyVG9TdHJpbmcoYXBwKTtcblxuICAgIGZvciAoY29uc3QgW2lkLCBjaGlsZHJlbl0gb2Ygc3RhdGUuc2xvdHMuZW50cmllcygpKSB7XG4gICAgICBjb25zdCBzbG90SHRtbCA9IHJlbmRlclRvU3RyaW5nKGgoRnJhZ21lbnQsIG51bGwsIGNoaWxkcmVuKSBhcyBWTm9kZSk7XG4gICAgICBjb25zdCB0ZW1wbGF0ZUlkID0gaWQucmVwbGFjZSgvOi9nLCBcIi1cIik7XG4gICAgICBodG1sICs9IGA8dGVtcGxhdGUgaWQ9XCIke3RlbXBsYXRlSWR9XCI+JHtzbG90SHRtbH08L3RlbXBsYXRlPmA7XG4gICAgfVxuXG4gICAgcmV0dXJuIGh0bWw7XG4gIH0gZmluYWxseSB7XG4gICAgc2V0UmVuZGVyU3RhdGUobnVsbCk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlck91dGVyRG9jdW1lbnQoXG4gIHN0YXRlOiBSZW5kZXJTdGF0ZSxcbiAgb3B0czoge1xuICAgIGJvZHlIdG1sOiBzdHJpbmc7XG4gICAgbGFuZz86IHN0cmluZztcbiAgICBwcmVsb2Fkczogc3RyaW5nW107XG4gICAgbW9kdWxlU2NyaXB0czogW3NyYzogc3RyaW5nLCBub25jZTogc3RyaW5nXVtdO1xuICB9LFxuKSB7XG4gIGNvbnN0IHtcbiAgICBkb2NIdG1sLFxuICAgIGRvY0hlYWQsXG4gICAgcmVuZGVyZWRIdG1sVGFnLFxuICAgIGRvY0JvZHksXG4gICAgZG9jSGVhZE5vZGVzLFxuICAgIGhlYWRWTm9kZXMsXG4gIH0gPSBzdGF0ZTtcbiAgbGV0IGRvY1RpdGxlID0gc3RhdGUuZG9jVGl0bGU7XG5cbiAgLy8gRmlsdGVyIG91dCBkdXBsaWNhdGUgaGVhZCB2bm9kZXMgYnkgXCJrZXlcIiBpZiBzZXRcbiAgY29uc3QgZmlsdGVyZWRIZWFkTm9kZXM6IFZOb2RlW10gPSBbXTtcblxuICBpZiAoaGVhZFZOb2Rlcy5sZW5ndGggPiAwKSB7XG4gICAgY29uc3Qgc2VlbiA9IG5ldyBNYXA8c3RyaW5nLCBWTm9kZT4oKTtcbiAgICBjb25zdCB1c2VyQ2hpbGRyZW4gPSB0b0NoaWxkQXJyYXkoaGVhZFZOb2Rlcyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB1c2VyQ2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGNoaWxkID0gdXNlckNoaWxkcmVuW2ldO1xuXG4gICAgICBpZiAoaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICAgIGlmIChjaGlsZC50eXBlID09PSBcInRpdGxlXCIpIHtcbiAgICAgICAgICBkb2NUaXRsZSA9IGNoaWxkO1xuICAgICAgICB9IGVsc2UgaWYgKGNoaWxkLmtleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgc2Vlbi5zZXQoY2hpbGQua2V5LCBjaGlsZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZmlsdGVyZWRIZWFkTm9kZXMucHVzaChjaGlsZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc2Vlbi5zaXplID4gMCkge1xuICAgICAgZmlsdGVyZWRIZWFkTm9kZXMucHVzaCguLi5zZWVuLnZhbHVlcygpKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBwYWdlID0gaChcbiAgICBcImh0bWxcIixcbiAgICBkb2NIdG1sID8/IHsgbGFuZzogb3B0cy5sYW5nIH0sXG4gICAgaChcbiAgICAgIFwiaGVhZFwiLFxuICAgICAgZG9jSGVhZCxcbiAgICAgICFyZW5kZXJlZEh0bWxUYWcgPyBoKFwibWV0YVwiLCB7IGNoYXJzZXQ6IFwidXRmLThcIiB9KSA6IG51bGwsXG4gICAgICAhcmVuZGVyZWRIdG1sVGFnXG4gICAgICAgID8gKGgoXCJtZXRhXCIsIHtcbiAgICAgICAgICBuYW1lOiBcInZpZXdwb3J0XCIsXG4gICAgICAgICAgY29udGVudDogXCJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wXCIsXG4gICAgICAgIH0pKVxuICAgICAgICA6IG51bGwsXG4gICAgICBkb2NUaXRsZSxcbiAgICAgIGRvY0hlYWROb2Rlcy5tYXAoKG5vZGUpID0+IGgobm9kZS50eXBlLCBub2RlLnByb3BzKSksXG4gICAgICBvcHRzLnByZWxvYWRzLm1hcCgoc3JjKSA9PlxuICAgICAgICBoKFwibGlua1wiLCB7IHJlbDogXCJtb2R1bGVwcmVsb2FkXCIsIGhyZWY6IHdpdGhCYXNlKHNyYywgc3RhdGUuYmFzZVBhdGgpIH0pXG4gICAgICApLFxuICAgICAgb3B0cy5tb2R1bGVTY3JpcHRzLm1hcCgoW3NyYywgbm9uY2VdKSA9PlxuICAgICAgICBoKFwic2NyaXB0XCIsIHtcbiAgICAgICAgICBzcmM6IHdpdGhCYXNlKHNyYywgc3RhdGUuYmFzZVBhdGgpLFxuICAgICAgICAgIG5vbmNlLFxuICAgICAgICAgIHR5cGU6IFwibW9kdWxlXCIsXG4gICAgICAgIH0pXG4gICAgICApLFxuICAgICAgZmlsdGVyZWRIZWFkTm9kZXMsXG4gICAgKSxcbiAgICBoKFwiYm9keVwiLCB7XG4gICAgICAuLi5kb2NCb2R5LFxuICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6IHsgX19odG1sOiBvcHRzLmJvZHlIdG1sIH0sXG4gICAgfSksXG4gICkgYXMgVk5vZGU7XG5cbiAgdHJ5IHtcbiAgICBzZXRSZW5kZXJTdGF0ZShzdGF0ZSk7XG4gICAgcmV0dXJuIFwiPCFET0NUWVBFIGh0bWw+XCIgKyByZW5kZXJUb1N0cmluZyhwYWdlKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBzZXRSZW5kZXJTdGF0ZShudWxsKTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLFNBQVMsY0FBYyxRQUFRLG9CQUFvQjtBQUNuRCxTQUFTLGNBQWMsUUFBUSxhQUFhO0FBQzVDLFNBRUUsUUFBUSxFQUNSLENBQUMsRUFDRCxjQUFjLEVBQ2QsWUFBWSxRQUVQLFNBQVM7QUFDaEIsU0FBUyxZQUFZLFFBQVEsd0JBQXdCO0FBQ3JELFNBQVMsV0FBVyxRQUFRLHVCQUF1QjtBQUNuRCxTQUFTLFFBQVEsUUFBUSxlQUFlO0FBRXhDLE9BQU8sU0FBUyxXQUFXLEtBQWtCO0VBQzNDLGVBQWU7RUFDZixNQUFNLHFCQUFxQixHQUFHO0VBQzlCLE1BQU0sWUFBWSxHQUFHO0VBRXJCLE1BQU0saUJBQWlCLE1BQU0sY0FBYztFQUMzQyxJQUFJO0lBQ0YsTUFBTSxpQkFBaUIsY0FBYyxDQUFDLGVBQWUsTUFBTSxHQUFHLEVBQUU7SUFDaEUsSUFBSSxZQUFZLEVBQUUsZ0JBQWdCLE1BQU0sWUFBWTtJQUVwRCxzQkFBc0I7SUFDdEIsSUFBSSxJQUFJLGVBQWUsTUFBTSxHQUFHO0lBQ2hDLE1BQU8sSUFBSztNQUNW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
// denoCacheMetadata=6412347383477213409,11926238337214588002