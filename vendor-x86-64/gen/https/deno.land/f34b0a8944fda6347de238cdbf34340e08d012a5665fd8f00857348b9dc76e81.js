export const KEY = "_f";
function b64decode(b64) {
  const binString = atob(b64);
  const size = binString.length;
  const bytes = new Uint8Array(size);
  for(let i = 0; i < size; i++){
    bytes[i] = binString.charCodeAt(i);
  }
  return bytes;
}
const INVALID_REFERENCE_ERROR = "Invalid reference";
function getPropertyFromPath(o, path) {
  for (const key of path){
    if (key === null) continue;
    if (key !== "value" && !Object.hasOwn(o, key)) {
      throw new Error(INVALID_REFERENCE_ERROR);
    }
    // deno-lint-ignore no-explicit-any
    o = o[key];
  }
  return o;
}
export function deserialize(str, signal) {
  function reviver(_key, value) {
    if (typeof value === "object" && value && KEY in value) {
      // deno-lint-ignore no-explicit-any
      const v = value;
      if (v[KEY] === "s") {
        return signal(v.v);
      }
      if (v[KEY] === "b") {
        return BigInt(v.d);
      }
      if (v[KEY] === "u8a") {
        return b64decode(v.d);
      }
      if (v[KEY] === "l") {
        const val = v.v;
        val[KEY] = v.k;
        return val;
      }
      throw new Error(`Unknown key: ${v[KEY]}`);
    }
    return value;
  }
  const { v, r } = JSON.parse(str, reviver);
  const references = r ?? [];
  for (const [targetPath, ...refPaths] of references){
    const target = getPropertyFromPath(v, targetPath);
    for (const refPath of refPaths){
      if (refPath.length === 0) throw new Error(INVALID_REFERENCE_ERROR);
      // set the reference to the target object
      const parent = getPropertyFromPath(v, refPath.slice(0, -1));
      const key = refPath[refPath.length - 1];
      if (key !== "value" && !Object.hasOwn(parent, key)) {
        throw new Error(INVALID_REFERENCE_ERROR);
      }
      // deno-lint-ignore no-explicit-any
      parent[key] = target;
    }
  }
  return v;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvZnJlc2hAMS42Ljgvc3JjL3J1bnRpbWUvZGVzZXJpYWxpemVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBLRVkgPSBcIl9mXCI7XG5cbmludGVyZmFjZSBTaWduYWw8VD4ge1xuICBwZWVrKCk6IFQ7XG4gIHZhbHVlOiBUO1xufVxuXG5mdW5jdGlvbiBiNjRkZWNvZGUoYjY0OiBzdHJpbmcpOiBVaW50OEFycmF5IHtcbiAgY29uc3QgYmluU3RyaW5nID0gYXRvYihiNjQpO1xuICBjb25zdCBzaXplID0gYmluU3RyaW5nLmxlbmd0aDtcbiAgY29uc3QgYnl0ZXMgPSBuZXcgVWludDhBcnJheShzaXplKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaXplOyBpKyspIHtcbiAgICBieXRlc1tpXSA9IGJpblN0cmluZy5jaGFyQ29kZUF0KGkpO1xuICB9XG4gIHJldHVybiBieXRlcztcbn1cblxuY29uc3QgSU5WQUxJRF9SRUZFUkVOQ0VfRVJST1IgPSBcIkludmFsaWQgcmVmZXJlbmNlXCI7XG5cbmZ1bmN0aW9uIGdldFByb3BlcnR5RnJvbVBhdGgobzogb2JqZWN0LCBwYXRoOiBzdHJpbmdbXSk6IG9iamVjdCB7XG4gIGZvciAoY29uc3Qga2V5IG9mIHBhdGgpIHtcbiAgICBpZiAoa2V5ID09PSBudWxsKSBjb250aW51ZTtcbiAgICBpZiAoa2V5ICE9PSBcInZhbHVlXCIgJiYgIU9iamVjdC5oYXNPd24obywga2V5KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKElOVkFMSURfUkVGRVJFTkNFX0VSUk9SKTtcbiAgICB9XG4gICAgLy8gZGVuby1saW50LWlnbm9yZSBuby1leHBsaWNpdC1hbnlcbiAgICBvID0gKG8gYXMgYW55KVtrZXldO1xuICB9XG4gIHJldHVybiBvO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVzZXJpYWxpemUoXG4gIHN0cjogc3RyaW5nLFxuICBzaWduYWw/OiA8VD4oYTogVCkgPT4gU2lnbmFsPFQ+LFxuKTogdW5rbm93biB7XG4gIGZ1bmN0aW9uIHJldml2ZXIodGhpczogdW5rbm93biwgX2tleTogc3RyaW5nLCB2YWx1ZTogdW5rbm93bik6IHVua25vd24ge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgdmFsdWUgJiYgS0VZIGluIHZhbHVlKSB7XG4gICAgICAvLyBkZW5vLWxpbnQtaWdub3JlIG5vLWV4cGxpY2l0LWFueVxuICAgICAgY29uc3QgdjogYW55ID0gdmFsdWU7XG4gICAgICBpZiAodltLRVldID09PSBcInNcIikge1xuICAgICAgICByZXR1cm4gc2lnbmFsISh2LnYpO1xuICAgICAgfVxuICAgICAgaWYgKHZbS0VZXSA9PT0gXCJiXCIpIHtcbiAgICAgICAgcmV0dXJuIEJpZ0ludCh2LmQpO1xuICAgICAgfVxuICAgICAgaWYgKHZbS0VZXSA9PT0gXCJ1OGFcIikge1xuICAgICAgICByZXR1cm4gYjY0ZGVjb2RlKHYuZCk7XG4gICAgICB9XG4gICAgICBpZiAodltLRVldID09PSBcImxcIikge1xuICAgICAgICBjb25zdCB2YWwgPSB2LnY7XG4gICAgICAgIHZhbFtLRVldID0gdi5rO1xuICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIGtleTogJHt2W0tFWV19YCk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBjb25zdCB7IHYsIHIgfSA9IEpTT04ucGFyc2Uoc3RyLCByZXZpdmVyKTtcbiAgY29uc3QgcmVmZXJlbmNlcyA9IChyID8/IFtdKSBhcyBbc3RyaW5nW10sIC4uLnN0cmluZ1tdW11dW107XG4gIGZvciAoY29uc3QgW3RhcmdldFBhdGgsIC4uLnJlZlBhdGhzXSBvZiByZWZlcmVuY2VzKSB7XG4gICAgY29uc3QgdGFyZ2V0ID0gZ2V0UHJvcGVydHlGcm9tUGF0aCh2LCB0YXJnZXRQYXRoKTtcbiAgICBmb3IgKGNvbnN0IHJlZlBhdGggb2YgcmVmUGF0aHMpIHtcbiAgICAgIGlmIChyZWZQYXRoLmxlbmd0aCA9PT0gMCkgdGhyb3cgbmV3IEVycm9yKElOVkFMSURfUkVGRVJFTkNFX0VSUk9SKTtcbiAgICAgIC8vIHNldCB0aGUgcmVmZXJlbmNlIHRvIHRoZSB0YXJnZXQgb2JqZWN0XG4gICAgICBjb25zdCBwYXJlbnQgPSBnZXRQcm9wZXJ0eUZyb21QYXRoKHYsIHJlZlBhdGguc2xpY2UoMCwgLTEpKTtcbiAgICAgIGNvbnN0IGtleSA9IHJlZlBhdGhbcmVmUGF0aC5sZW5ndGggLSAxXSE7XG4gICAgICBpZiAoa2V5ICE9PSBcInZhbHVlXCIgJiYgIU9iamVjdC5oYXNPd24ocGFyZW50LCBrZXkpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihJTlZBTElEX1JFRkVSRU5DRV9FUlJPUik7XG4gICAgICB9XG4gICAgICAvLyBkZW5vLWxpbnQtaWdub3JlIG5vLWV4cGxpY2l0LWFueVxuICAgICAgKHBhcmVudCBhcyBhbnkpW2tleV0gPSB0YXJnZXQ7XG4gICAgfVxuICB9XG4gIHJldHVybiB2O1xufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sTUFBTSxNQUFNLEtBQUs7QUFPeEIsU0FBUyxVQUFVLEdBQVc7RUFDNUIsTUFBTSxZQUFZLEtBQUs7RUFDdkIsTUFBTSxPQUFPLFVBQVUsTUFBTTtFQUM3QixNQUFNLFFBQVEsSUFBSSxXQUFXO0VBQzdCLElBQUssSUFBSSxJQUFJLEdBQUcsSUFBSSxNQUFNLElBQUs7SUFDN0IsS0FBSyxDQUFDLEVBQUUsR0FBRyxVQUFVLFVBQVUsQ0FBQztFQUNsQztFQUNBLE9BQU87QUFDVDtBQUVBLE1BQU0sMEJBQTBCO0FBRWhDLFNBQVMsb0JBQW9CLENBQVMsRUFBRSxJQUFjO0VBQ3BELEtBQUssTUFBTSxPQUFPLEtBQU07SUFDdEIsSUFBSSxRQUFRLE1BQU07SUFDbEIsSUFBSSxRQUFRLFdBQVcsQ0FBQyxPQUFPLE1BQU0sQ0FBQyxHQUFHLE1BQU07TUFDN0MsTUFBTSxJQUFJLE1BQU07SUFDbEI7SUFDQSxtQ0FBbUM7SUFDbkMsSUFBSSxBQUFDLENBQVMsQ0FBQyxJQUFJO0VBQ3JCO0VBQ0EsT0FBTztBQUNUO0FBRUEsT0FBTyxTQUFTLFlBQ2QsR0FBVyxFQUNYLE1BQStCO0VBRS9CLFNBQVMsUUFBdUIsSUFBWSxFQUFFLEtBQWM7SUFDMUQsSUFBSSxPQUFPLFVBQVUsWUFBWSxTQUFTLE9BQU8sT0FBTztNQUN0RCxtQ0FBbUM7TUFDbkMsTUFBTSxJQUFTO01BQ2YsSUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLEtBQUs7UUFDbEIsT0FBTyxPQUFRLEVBQUUsQ0FBQztNQUNwQjtNQUNBLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxLQUFLO1FBQ2xCLE9BQU8sT0FBTyxFQUFFLENBQUM7TUFDbkI7TUFDQSxJQUFJLENBQUMsQ0FBQyxJQUFJLEtBQUssT0FBTztRQUNwQixPQUFPLFVBQVUsRUFBRSxDQUFDO01BQ3RCO01BQ0EsSUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLEtBQUs7UUFDbEIsTUFBTSxNQUFNLEVBQUUsQ0FBQztRQUNmLEdBQUcsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDO1FBQ2QsT0FBTztNQUNUO01BQ0EsTUFBTSxJQUFJLE1BQU0sQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzFDO0lBQ0EsT0FBTztFQUNUO0VBQ0EsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxLQUFLLEtBQUssQ0FBQyxLQUFLO0VBQ2pDLE1BQU0sYUFBYyxLQUFLLEVBQUU7RUFDM0IsS0FBSyxNQUFNLENBQUMsWUFBWSxHQUFHLFNBQVMsSUFBSSxXQUFZO0lBQ2xELE1BQU0sU0FBUyxvQkFBb0IsR0FBRztJQUN0QyxLQUFLLE1BQU0sV0FBVyxTQUFVO01BQzlCLElBQUksUUFBUSxNQUFNLEtBQUssR0FBRyxNQUFNLElBQUksTUFBTTtNQUMxQyx5Q0FBeUM7TUFDekMsTUFBTSxTQUFTLG9CQUFvQixHQUFHLFFBQVEsS0FBSyxDQUFDLEdBQUcsQ0FBQztNQUN4RCxNQUFNLE1BQU0sT0FBTyxDQUFDLFFBQVEsTUFBTSxHQUFHLEVBQUU7TUFDdkMsSUFBSSxRQUFRLFdBQVcsQ0FBQyxPQUFPLE1BQU0sQ0FBQyxRQUFRLE1BQU07UUFDbEQsTUFBTSxJQUFJLE1BQU07TUFDbEI7TUFDQSxtQ0FBbUM7TUFDbEMsTUFBYyxDQUFDLElBQUksR0FBRztJQUN6QjtFQUNGO0VBQ0EsT0FBTztBQUNUIn0=
// denoCacheMetadata=3952759905928702070,9251268598321640179