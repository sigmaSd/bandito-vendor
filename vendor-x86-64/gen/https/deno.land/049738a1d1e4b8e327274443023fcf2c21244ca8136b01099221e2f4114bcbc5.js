import { PARTIAL_SEARCH_PARAM } from "../constants.ts";
export const knownMethods = [
  "GET",
  "HEAD",
  "POST",
  "PUT",
  "DELETE",
  "OPTIONS",
  "PATCH"
];
export function defaultOtherHandler(_req) {
  return new Response(null, {
    status: 404
  });
}
export function defaultErrorHandler(_req, ctx) {
  console.error(ctx.error);
  return new Response(null, {
    status: 500
  });
}
export function defaultUnknownMethodHandler(_req, _ctx, knownMethods) {
  return new Response(null, {
    status: 405,
    headers: {
      Accept: knownMethods.join(", ")
    }
  });
}
export const IS_PATTERN = /[*:{}+?()]/;
function processRoutes(processedRoutes, routes, destination) {
  for (const [path, def] of Object.entries(routes)){
    const pattern = destination === "static" || !IS_PATTERN.test(path) ? path : new URLPattern({
      pathname: path
    });
    const entry = {
      baseRoute: def.baseRoute,
      pattern,
      originalPattern: path,
      methods: {},
      default: undefined,
      destination
    };
    for (const [method, handler] of Object.entries(def.methods)){
      if (method === "default") {
        entry.default = handler;
      } else if (knownMethods.includes(method)) {
        entry.methods[method] = handler;
      }
    }
    processedRoutes.push(entry);
  }
}
export function getParamsAndRoute({ internalRoutes, staticRoutes, routes }) {
  const processedRoutes = [];
  processRoutes(processedRoutes, internalRoutes, "internal");
  processRoutes(processedRoutes, staticRoutes, "static");
  processRoutes(processedRoutes, routes, "route");
  const statics = new Map();
  return (url)=>{
    const isPartial = url.searchParams.has(PARTIAL_SEARCH_PARAM);
    const pathname = url.pathname;
    const cached = statics.get(pathname);
    if (cached !== undefined) {
      cached.isPartial = isPartial;
      return cached;
    }
    for(let i = 0; i < processedRoutes.length; i++){
      const route = processedRoutes[i];
      if (route === null) continue;
      // Static routes where the full pattern contains no dynamic
      // parts and must be an exact match. We use that for static
      // files.
      if (typeof route.pattern === "string") {
        if (route.pattern === pathname) {
          processedRoutes[i] = null;
          const res = {
            route: route,
            params: {},
            isPartial
          };
          statics.set(route.pattern, res);
          return res;
        }
        continue;
      }
      const res = route.pattern.exec(url);
      if (res !== null) {
        return {
          route: route,
          params: res.pathname.groups,
          isPartial
        };
      }
    }
    return {
      route: undefined,
      params: {},
      isPartial
    };
  };
}
export function router({ otherHandler, unknownMethodHandler }) {
  unknownMethodHandler ??= defaultUnknownMethodHandler;
  return (req, ctx, route)=>{
    if (route) {
      // If not overridden, HEAD requests should be handled as GET requests but without the body.
      if (req.method === "HEAD" && !route.methods["HEAD"]) {
        req = new Request(req.url, {
          method: "GET",
          headers: req.headers
        });
      }
      for (const [method, handler] of Object.entries(route.methods)){
        if (req.method === method) {
          return {
            destination: route.destination,
            handler: ()=>handler(req, ctx)
          };
        }
      }
      if (route.default) {
        return {
          destination: route.destination,
          handler: ()=>route.default(req, ctx)
        };
      } else {
        return {
          destination: route.destination,
          handler: ()=>unknownMethodHandler(req, ctx, Object.keys(route.methods))
        };
      }
    }
    return {
      destination: "notFound",
      handler: ()=>otherHandler(req, ctx)
    };
  };
}
export function withBase(src, base) {
  if (base !== undefined && src.startsWith("/") && !src.startsWith(base)) {
    return base + src;
  }
  return src;
}
//# sourceMappingURL=data:application/json;base64,
// denoCacheMetadata=10614100408355656646,7929028619505300643