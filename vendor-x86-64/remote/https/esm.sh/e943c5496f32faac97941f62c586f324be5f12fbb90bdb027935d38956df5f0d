declare const identifier: unique symbol;
declare function batch<T>(callback: () => T): T;
declare function untracked<T>(callback: () => T): T;
declare class Signal<T = any> {
    constructor(value?: T);
    subscribe(fn: (value: T) => void): () => void;
    valueOf(): T;
    toString(): string;
    toJSON(): T;
    peek(): T;
    brand: typeof identifier;
    get value(): T;
    set value(value: T);
}
declare function signal<T>(value: T): Signal<T>;
interface ReadonlySignal<T = any> extends Signal<T> {
    readonly value: T;
}
declare function computed<T>(compute: () => T): ReadonlySignal<T>;
declare type EffectCleanup = () => unknown;
declare function effect(compute: () => unknown | EffectCleanup): () => void;
export { signal, computed, effect, batch, Signal, ReadonlySignal, untracked, };

// denoCacheMetadata={"headers":{"cf-ray":"8ce882271f995bc9-TUN","access-control-allow-origin":"*","content-type":"application/typescript; charset=utf-8","content-length":"801","access-control-allow-methods":"*","cache-control":"public, max-age=31536000, immutable","date":"Sun, 06 Oct 2024 20:47:46 GMT","vary":"Origin, Accept-Encoding","x-content-source":"esm-worker","server":"cloudflare"},"url":"https://esm.sh/v135/@preact/signals-core@1.5.1/X-ZS8q/dist/signals-core.d.ts","time":1728247666}