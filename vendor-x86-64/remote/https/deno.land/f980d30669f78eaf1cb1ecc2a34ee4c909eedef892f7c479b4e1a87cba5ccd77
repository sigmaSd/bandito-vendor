// Copyright 2018-2024 the Deno authors. All rights reserved. MIT license.
import { dirname } from "../path/dirname.ts";
import { ensureDir, ensureDirSync } from "./ensure_dir.ts";
import { getFileInfoType } from "./_get_file_info_type.ts";
import { toPathString } from "./_to_path_string.ts";

/**
 * Ensures that the file exists.
 * If the file that is requested to be created is in directories that do not
 * exist.
 * these directories are created. If the file already exists,
 * it is NOTMODIFIED.
 * Requires the `--allow-read` and `--allow-write` flag.
 *
 * @example
 * ```ts
 * import { ensureFile } from "https://deno.land/std@$STD_VERSION/fs/mod.ts";
 *
 * ensureFile("./folder/targetFile.dat"); // returns promise
 * ```
 */
export async function ensureFile(filePath: string | URL): Promise<void> {
  try {
    // if file exists
    const stat = await Deno.lstat(filePath);
    if (!stat.isFile) {
      throw new Error(
        `Ensure path exists, expected 'file', got '${getFileInfoType(stat)}'`,
      );
    }
  } catch (err) {
    // if file not exists
    if (err instanceof Deno.errors.NotFound) {
      // ensure dir exists
      await ensureDir(dirname(toPathString(filePath)));
      // create file
      await Deno.writeFile(filePath, new Uint8Array());
      return;
    }

    throw err;
  }
}

/**
 * Ensures that the file exists.
 * If the file that is requested to be created is in directories that do not
 * exist,
 * these directories are created. If the file already exists,
 * it is NOT MODIFIED.
 * Requires the `--allow-read` and `--allow-write` flag.
 *
 * @example
 * ```ts
 * import { ensureFileSync } from "https://deno.land/std@$STD_VERSION/fs/mod.ts";
 *
 * ensureFileSync("./folder/targetFile.dat"); // void
 * ```
 */
export function ensureFileSync(filePath: string | URL): void {
  try {
    // if file exists
    const stat = Deno.lstatSync(filePath);
    if (!stat.isFile) {
      throw new Error(
        `Ensure path exists, expected 'file', got '${getFileInfoType(stat)}'`,
      );
    }
  } catch (err) {
    // if file not exists
    if (err instanceof Deno.errors.NotFound) {
      // ensure dir exists
      ensureDirSync(dirname(toPathString(filePath)));
      // create file
      Deno.writeFileSync(filePath, new Uint8Array());
      return;
    }
    throw err;
  }
}

// denoCacheMetadata={"headers":{"cross-origin-opener-policy":"same-origin","server":"deno/gcp-europe-west3","referrer-policy":"strict-origin-when-cross-origin","age":"20264473","x-amz-replication-status":"COMPLETED","x-frame-options":"DENY","content-length":"2326","content-security-policy":"default-src 'none'; style-src 'unsafe-inline'; sandbox","cache-control":"public, max-age=31536000, immutable","server-timing":"fetchSource;dur=34","last-modified":"Thu, 15 Feb 2024 05:02:28 GMT","vary":"Accept-Encoding, Origin","etag":"\"d5d62ecb14110705a0b1de87ab6fa0f0\"","via":"http/2 edgeproxy-h","x-amz-cf-id":"tIAwbg_uL2aip6gA0dP_21p0IrgbTUSb_ofLuFHg9iUm27IyWmbp5w==","date":"Thu, 15 Feb 2024 07:46:13 GMT","strict-transport-security":"max-age=63072000; includeSubDomains; preload","x-amz-cf-pop":"FRA56-P5","x-amz-server-side-encryption":"AES256","content-type":"application/typescript; charset=utf-8","cross-origin-resource-policy":"same-origin","cross-origin-embedder-policy":"same-origin","x-amz-version-id":"qjOKTlEenZloji48DE_tf5fvR.ZaZ.df","x-cache":"Hit from cloudfront","x-content-type-options":"nosniff","accept-ranges":"bytes","access-control-allow-origin":"*"},"url":"https://deno.land/std@0.216.0/fs/ensure_file.ts","time":1728247645}