// Copyright 2018-2024 the Deno authors. All rights reserved. MIT license.
import { dirname } from "jsr:/@std/path@^0.221.0/dirname";
import { ensureDir, ensureDirSync } from "./ensure_dir.ts";
import { getFileInfoType } from "./_get_file_info_type.ts";
import { toPathString } from "./_to_path_string.ts";

/**
 * Asynchronously ensures that the file exists. If the file that is requested to
 * be created is in directories that do not exist, these directories are created.
 * If the file already exists, it is not modified.
 *
 * Requires the `--allow-read` and `--allow-write` flag.
 *
 * @param filePath The path of the file to ensure, as a string or URL.
 * @returns A void promise that resolves once the file exists.
 *
 * @example
 * ```ts
 * import { ensureFile } from "@std/fs/ensure-file";
 *
 * await ensureFile("./folder/targetFile.dat");
 * ```
 */
export async function ensureFile(filePath: string | URL): Promise<void> {
  try {
    // if file exists
    const stat = await Deno.lstat(filePath);
    if (!stat.isFile) {
      throw new Error(
        `Ensure path exists, expected 'file', got '${getFileInfoType(stat)}'`,
      );
    }
  } catch (err) {
    // if file not exists
    if (err instanceof Deno.errors.NotFound) {
      // ensure dir exists
      await ensureDir(dirname(toPathString(filePath)));
      // create file
      await Deno.writeFile(filePath, new Uint8Array());
      return;
    }

    throw err;
  }
}

/**
 * Synchronously ensures that the file exists. If the file that is requested to
 * be created is in directories that do not exist, these directories are created.
 * If the file already exists, it is not modified.
 *
 * Requires the `--allow-read` and `--allow-write` flag.
 *
 * @param filePath The path of the file to ensure, as a string or URL.
 * @returns A void value that returns once the file exists.
 *
 * @example
 * ```ts
 * import { ensureFileSync } from "@std/fs/ensure-file";
 *
 * ensureFileSync("./folder/targetFile.dat");
 * ```
 */
export function ensureFileSync(filePath: string | URL): void {
  try {
    // if file exists
    const stat = Deno.lstatSync(filePath);
    if (!stat.isFile) {
      throw new Error(
        `Ensure path exists, expected 'file', got '${getFileInfoType(stat)}'`,
      );
    }
  } catch (err) {
    // if file not exists
    if (err instanceof Deno.errors.NotFound) {
      // ensure dir exists
      ensureDirSync(dirname(toPathString(filePath)));
      // create file
      Deno.writeFileSync(filePath, new Uint8Array());
      return;
    }
    throw err;
  }
}

// denoCacheMetadata={"headers":{"x-jsr-cache-id":"MRS-e5589c6c","content-security-policy":"default-src 'none'; script-src 'none'; style-src 'none'; img-src 'none'; font-src 'none'; connect-src 'none'; frame-src 'none'; object-src 'none'; frame-ancestors 'none'; sandbox; form-action 'none';","cross-origin-resource-policy":"cross-origin","date":"Sun, 06 Oct 2024 20:47:19 GMT","content-type":"text/typescript","access-control-allow-origin":"*","etag":"\"74ce8182713fcc51f3f7d2842dad6f13\"","x-content-type-options":"nosniff","cache-control":"public, max-age=31536000, immutable","x-goog-metageneration":"1","x-goog-hash":"crc32c=9pJl0w==,md5=dM6BgnE/zFHz99KELa1vEw==","content-length":"2563","x-goog-generation":"1711584270026615","alt-svc":"h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000","x-goog-stored-content-length":"2563","last-modified":"Thu, 28 Mar 2024 00:04:30 GMT","expires":"Mon, 06 Oct 2025 20:47:19 GMT","x-robots-tag":"noindex","x-guploader-uploadid":"AHmUCY3U66o9SKlnsIEwRMA1vdxU0MY1d1xExAfYRuRHJdwM4ezmZxR4DTGWSZotFGoJnduMmZDmNipvXQ","x-goog-stored-content-encoding":"identity","via":"1.1 google","x-jsr-cache-status":"miss","x-goog-storage-class":"STANDARD","accept-ranges":"bytes","access-control-expose-headers":"*","server":"UploadServer"},"url":"https://jsr.io/@std/fs/0.221.0/ensure_file.ts","time":1728247639}