// Copyright 2018-2024 the Deno authors. All rights reserved. MIT license.
// This module is browser compatible.

import { CHAR_DOT } from "./../_common/constants.ts";
import { ParsedPath } from "./../_interface.ts";
import { stripTrailingSeparators } from "./../_common/strip_trailing_separators.ts";
import { assertPath } from "./../_common/assert_path.ts";
import { isPosixPathSeparator } from "./_util.ts";

/**
 * Return a `ParsedPath` object of the `path`.
 * @param path to process
 */
export function parse(path: string): ParsedPath {
  assertPath(path);

  const ret: ParsedPath = { root: "", dir: "", base: "", ext: "", name: "" };
  if (path.length === 0) return ret;
  const isAbsolute = isPosixPathSeparator(path.charCodeAt(0));
  let start: number;
  if (isAbsolute) {
    ret.root = "/";
    start = 1;
  } else {
    start = 0;
  }
  let startDot = -1;
  let startPart = 0;
  let end = -1;
  let matchedSlash = true;
  let i = path.length - 1;

  // Track the state of characters (if any) we see before our first dot and
  // after any path separator we find
  let preDotState = 0;

  // Get non-dir info
  for (; i >= start; --i) {
    const code = path.charCodeAt(i);
    if (isPosixPathSeparator(code)) {
      // If we reached a path separator that was not part of a set of path
      // separators at the end of the string, stop now
      if (!matchedSlash) {
        startPart = i + 1;
        break;
      }
      continue;
    }
    if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // extension
      matchedSlash = false;
      end = i + 1;
    }
    if (code === CHAR_DOT) {
      // If this is our first dot, mark it as the start of our extension
      if (startDot === -1) startDot = i;
      else if (preDotState !== 1) preDotState = 1;
    } else if (startDot !== -1) {
      // We saw a non-dot and non-path separator before our dot, so we should
      // have a good chance at having a non-empty extension
      preDotState = -1;
    }
  }

  if (
    startDot === -1 ||
    end === -1 ||
    // We saw a non-dot character immediately before the dot
    preDotState === 0 ||
    // The (right-most) trimmed path component is exactly '..'
    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)
  ) {
    if (end !== -1) {
      if (startPart === 0 && isAbsolute) {
        ret.base = ret.name = path.slice(1, end);
      } else {
        ret.base = ret.name = path.slice(startPart, end);
      }
    }
    // Fallback to '/' in case there is no basename
    ret.base = ret.base || "/";
  } else {
    if (startPart === 0 && isAbsolute) {
      ret.name = path.slice(1, startDot);
      ret.base = path.slice(1, end);
    } else {
      ret.name = path.slice(startPart, startDot);
      ret.base = path.slice(startPart, end);
    }
    ret.ext = path.slice(startDot, end);
  }

  if (startPart > 0) {
    ret.dir = stripTrailingSeparators(
      path.slice(0, startPart - 1),
      isPosixPathSeparator,
    );
  } else if (isAbsolute) ret.dir = "/";

  return ret;
}

// denoCacheMetadata={"headers":{"etag":"\"f40341310eef7c7953869b6ca1ff5ece\"","x-goog-stored-content-encoding":"identity","x-goog-stored-content-length":"3070","x-goog-generation":"1706296079208260","content-type":"text/typescript","content-security-policy":"default-src 'none'; script-src 'none'; style-src 'none'; img-src 'none'; font-src 'none'; connect-src 'none'; frame-src 'none'; object-src 'none'; frame-ancestors 'none'; sandbox; form-action 'none';","cache-control":"public, max-age=31536000, immutable","x-goog-metageneration":"1","content-length":"3070","expires":"Mon, 06 Oct 2025 20:47:29 GMT","via":"1.1 google","x-jsr-cache-id":"MRS-e5589c6c","cross-origin-resource-policy":"cross-origin","accept-ranges":"bytes","x-jsr-cache-status":"miss","access-control-allow-origin":"*","date":"Sun, 06 Oct 2024 20:47:29 GMT","x-guploader-uploadid":"AHmUCY0z83sLOxGifFYlcOCmWRnvLJj3pZAN04nhXfa3AJB6f9NuQya2-XPWu0TV2lg1UD0_0GocXQ7uAQ","server":"UploadServer","access-control-expose-headers":"*","x-content-type-options":"nosniff","alt-svc":"h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000","last-modified":"Fri, 26 Jan 2024 19:07:59 GMT","x-goog-storage-class":"STANDARD","x-goog-hash":"crc32c=pti7aQ==,md5=9ANBMQ7vfHlThptsof9ezg==","x-robots-tag":"noindex"},"url":"https://jsr.io/@std/path/0.213.1/posix/parse.ts","time":1728247649}