/**
 * Plug is a drop in extension for using remote dynamic libraries in deno. It
 * automatically handles caching and loading with minimal overhead. It can
 * automatically create the URL for your cross-operating-system, cross-architecture
 * libraries if you so wish using a simple configuration which deviates from
 * the standard URL/string path input.
 *
 * @example
 * ```ts
 * import { dlopen } from "@denosaurs/plug";
 *
 * // Drop-in replacement for `Deno.dlopen` which fetches the following depending
 * // on operating system:
 * // * darwin: "https://example.com/some/path/libexample.dylib"
 * // * windows: "https://example.com/some/path/example.dll"
 * // * linux: "https://example.com/some/path/libexample.so"
 * const library = await dlopen("https://example.com/some/path/", {
 *   noop: { parameters: [], result: "void" },
 * });
 *
 * library.symbols.noop();
 * ```
 *
 * @example
 * ```ts
 * import { dlopen, FetchOptions } from "@denosaurs/plug";
 *
 * // If you want plug to guess your binary names
 * const options: FetchOptions = {
 *   name: "example",
 *   url: "https://example.com/some/path/",
 *   // Becomes:
 *   // darwin: "https://example.com/some/path/libexample.dylib"
 *   // windows: "https://example.com/some/path/example.dll"
 *   // linux: "https://example.com/some/path/libexample.so"
 * };
 *
 * const library = await dlopen(options, {
 *   noop: { parameters: [], result: "void" },
 * });
 *
 * library.symbols.noop();
 * ```
 *
 * @example
 * ```ts
 * import { dlopen, FetchOptions } from "@denosaurs/plug";
 *
 * // Also you can specify the path for certain architecture
 * const options: FetchOptions = {
 *   name: "example",
 *   url: {
 *     darwin: {
 *       aarch64: `https://example.com/some/path/libexample.aarch64.dylib`,
 *       x86_64: `https://example.com/some/path/libexample.x86_64.dylib`,
 *     },
 *     windows: `https://example.com/some/path/example.dll`,
 *     linux: `https://example.com/some/path/libexample.so`,
 *   },
 * };
 *
 * await dlopen(options, {});
 * ```
 *
 * @example
 * ```ts
 * import { dlopen, FetchOptions } from "@denosaurs/plug";
 *
 * // Or even configure plug to automatically guess the binary names for you,
 * // even when there are special rules for naming on specific architectures
 * const options: FetchOptions = {
 *   name: "test",
 *   url: "https://example.com/some/path/",
 *   suffixes: {
 *     darwin: {
 *       aarch64: ".aarch64",
 *       x86_64: ".x86_64",
 *     },
 *   },
 *   // Becomes:
 *   // darwin-aarch64: "https://example.com/some/path/libexample.aarch64.dylib"
 *   // darwin-x86_64: "https://example.com/some/path/libexample.x86_64.dylib"
 * };
 *
 * await dlopen(options, {});
 * ```
 *
 * @module
 */

import { download } from "./download.ts";
import type { FetchOptions } from "./types.ts";

export type {
  ArchRecord,
  CacheLocation,
  CacheOptions,
  CacheSetting,
  CrossOptions,
  FetchOptions,
  NamedOptions,
  NestedCrossRecord,
  OsRecord,
  URLOptions,
} from "./types.ts";
export { download } from "./download.ts";

/* Magic types from deno which help implement better FFI type checking */
type Cast<A, B> = A extends B ? A : B;
type Const<T> = Cast<
  T,
  | (T extends string | number | bigint | boolean ? T : never)
  | { [K in keyof T]: Const<T[K]> }
  | []
>;

/**
 * Opens a dynamic library and registers symbols, compatible with
 * {@link Deno.dlopen} yet with extended functionality allowing you to use
 * remote (or local) binaries, automatically building the binary name and
 * controlling the caching policy.
 *
 * @example
 * ```ts
 * import { dlopen, FetchOptions } from "@denosaurs/plug";
 *
 * // Configure plug to automatically guess the binary names for you, even when
 * // there for example are special rules for naming on specific architectures
 * const options: FetchOptions = {
 *   name: "test",
 *   url: "https://example.com/some/path/",
 *   suffixes: {
 *     darwin: {
 *       aarch64: ".aarch64",
 *       x86_64: ".x86_64",
 *     },
 *   },
 *   // Becomes:
 *   // darwin-aarch64: "https://example.com/some/path/libexample.aarch64.dylib"
 *   // darwin-x86_64: "https://example.com/some/path/libexample.x86_64.dylib"
 * };
 *
 * await dlopen(options, {});
 * ```
 *
 * @param options See {@link FetchOptions}
 * @param symbols A record extending {@link Deno.ForeignLibraryInterface}
 * @returns An opened {@link Deno.DynamicLibrary}
 */
export async function dlopen<S extends Deno.ForeignLibraryInterface>(
  options: FetchOptions,
  symbols: Const<S>,
): Promise<Deno.DynamicLibrary<S>> {
  if (Deno.dlopen === undefined) {
    throw new Error("`--unstable-ffi` is required");
  }
  // deno-lint-ignore no-explicit-any
  return Deno.dlopen<S>(await download(options), symbols as any);
}

// denoCacheMetadata={"headers":{"last-modified":"Tue, 09 Apr 2024 10:20:29 GMT","x-goog-stored-content-length":"4760","x-goog-metageneration":"1","accept-ranges":"bytes","content-type":"text/typescript","access-control-allow-origin":"*","date":"Sun, 06 Oct 2024 20:47:18 GMT","via":"1.1 google","server":"UploadServer","x-jsr-cache-status":"miss","cross-origin-resource-policy":"cross-origin","x-content-type-options":"nosniff","content-length":"4760","x-goog-storage-class":"STANDARD","x-jsr-cache-id":"MRS-e5589c6c","x-goog-hash":"crc32c=l+rHpA==,md5=XKirnK3d4RUOPOWHIcThRQ==","etag":"\"5ca8ab9caddde1150e3ce58721c4e145\"","x-goog-generation":"1712658029471071","x-guploader-uploadid":"AHmUCY0WnLTZXmZJxicy1j2E6l1XBXO8y7Js63ZDPJ7OcXH0spWfSwa0Ns5u3QcZEob5y06I-aEiLzM24A","content-security-policy":"default-src 'none'; script-src 'none'; style-src 'none'; img-src 'none'; font-src 'none'; connect-src 'none'; frame-src 'none'; object-src 'none'; frame-ancestors 'none'; sandbox; form-action 'none';","x-goog-stored-content-encoding":"identity","access-control-expose-headers":"*","expires":"Mon, 06 Oct 2025 20:47:18 GMT","cache-control":"public, max-age=31536000, immutable","x-robots-tag":"noindex","alt-svc":"h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000"},"url":"https://jsr.io/@denosaurs/plug/1.0.6/mod.ts","time":1728247638}