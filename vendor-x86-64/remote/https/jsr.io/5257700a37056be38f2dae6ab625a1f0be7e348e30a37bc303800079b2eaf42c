// Copyright 2018-2024 the Deno authors. All rights reserved. MIT license.
import { join } from "jsr:/@std/path@^0.221.0/join";
import { toPathString } from "./_to_path_string.ts";

/**
 * Asynchronously ensures that a directory is empty deletes the directory
 * contents it is not empty. If the directory does not exist, it is created.
 * The directory itself is not deleted.
 *
 * Requires the `--allow-read` and `--allow-write` flag.
 *
 * @param dir The path of the directory to empty, as a string or URL.
 * @returns A void promise that resolves once the directory is empty.
 *
 * @example
 * ```ts
 * import { emptyDir } from "@std/fs/empty-dir";
 *
 * await emptyDir("./foo");
 * ```
 */
export async function emptyDir(dir: string | URL) {
  try {
    const items = await Array.fromAsync(Deno.readDir(dir));

    await Promise.all(items.map((item) => {
      if (item && item.name) {
        const filepath = join(toPathString(dir), item.name);
        return Deno.remove(filepath, { recursive: true });
      }
    }));
  } catch (err) {
    if (!(err instanceof Deno.errors.NotFound)) {
      throw err;
    }

    // if not exist. then create it
    await Deno.mkdir(dir, { recursive: true });
  }
}

/**
 * Synchronously ensures that a directory is empty deletes the directory
 * contents it is not empty. If the directory does not exist, it is created.
 * The directory itself is not deleted.
 *
 * Requires the `--allow-read` and `--allow-write` flag.
 *
 * @param dir The path of the directory to empty, as a string or URL.
 * @returns A void value that returns once the directory is empty.
 *
 * @example
 * ```ts
 * import { emptyDirSync } from "@std/fs/empty-dir";
 *
 * emptyDirSync("./foo");
 * ```
 */
export function emptyDirSync(dir: string | URL) {
  try {
    const items = [...Deno.readDirSync(dir)];

    // If the directory exists, remove all entries inside it.
    while (items.length) {
      const item = items.shift();
      if (item && item.name) {
        const filepath = join(toPathString(dir), item.name);
        Deno.removeSync(filepath, { recursive: true });
      }
    }
  } catch (err) {
    if (!(err instanceof Deno.errors.NotFound)) {
      throw err;
    }
    // if not exist. then create it
    Deno.mkdirSync(dir, { recursive: true });
  }
}

// denoCacheMetadata={"headers":{"x-jsr-cache-status":"miss","x-robots-tag":"noindex","date":"Sun, 06 Oct 2024 20:47:19 GMT","x-goog-generation":"1711584270014841","x-guploader-uploadid":"AHmUCY1DFlx9S0OPnoklxIJOutk-vd4zkAKDR6_MIEM2yqnJG0PLcRMiTuXyFXDI42H9g7QSKpmhcD9xVw","content-security-policy":"default-src 'none'; script-src 'none'; style-src 'none'; img-src 'none'; font-src 'none'; connect-src 'none'; frame-src 'none'; object-src 'none'; frame-ancestors 'none'; sandbox; form-action 'none';","access-control-allow-origin":"*","x-goog-metageneration":"1","access-control-expose-headers":"*","alt-svc":"h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000","x-jsr-cache-id":"MRS-e5589c6c","content-type":"text/typescript","x-goog-stored-content-encoding":"identity","x-goog-hash":"crc32c=PkwT+Q==,md5=cNiFOqrIZFScYbt9jpKr7w==","content-length":"2291","cache-control":"public, max-age=31536000, immutable","cross-origin-resource-policy":"cross-origin","via":"1.1 google","x-content-type-options":"nosniff","accept-ranges":"bytes","etag":"\"70d8853aaac864549c61bb7d8e92abef\"","x-goog-storage-class":"STANDARD","server":"UploadServer","expires":"Mon, 06 Oct 2025 20:47:19 GMT","x-goog-stored-content-length":"2291","last-modified":"Thu, 28 Mar 2024 00:04:30 GMT"},"url":"https://jsr.io/@std/fs/0.221.0/empty_dir.ts","time":1728247639}