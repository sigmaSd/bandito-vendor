// Copyright 2018-2024 the Deno authors. All rights reserved. MIT license.

/** End-of-line character for POSIX platforms such as macOS and Linux. */
export const LF = "\n" as const;

/** End-of-line character for Windows platforms. */
export const CRLF = "\r\n" as const;

/**
 * End-of-line character evaluated for the current platform.
 *
 * @example
 * ```ts
 * import { EOL } from "@std/fs/eol";
 *
 * EOL; // "\n" on POSIX platforms and "\r\n" on Windows
 * ```
 */
export const EOL: "\n" | "\r\n" = Deno?.build.os === "windows" ? CRLF : LF;

const regDetect = /(?:\r?\n)/g;

/**
 * Returns the detected EOL character(s) detected in the input string. If no EOL
 * character is detected, `null` is returned.
 *
 * @param content The input string to detect EOL characters.
 * @returns The detected EOL character(s) or `null` if no EOL character is detected.
 *
 * @example
 * ```ts
 * import { detect } from "@std/fs/eol";
 *
 * detect("deno\r\nis not\r\nnode"); // "\r\n"
 * detect("deno\nis not\r\nnode"); // "\r\n"
 * detect("deno\nis not\nnode"); // "\n"
 * detect("deno is not node"); // null
 * ```
 */
export function detect(content: string): typeof EOL | null {
  const d = content.match(regDetect);
  if (!d || d.length === 0) {
    return null;
  }
  const hasCRLF = d.some((x: string): boolean => x === CRLF);

  return hasCRLF ? CRLF : LF;
}

/**
 * Normalize the input string to the targeted EOL.
 *
 * @param content The input string to normalize.
 * @param eol The EOL character(s) to normalize the input string to.
 * @returns The input string normalized to the targeted EOL.
 *
 * @example
 * ```ts
 * import { LF, format } from "@std/fs/eol";
 *
 * const CRLFinput = "deno\r\nis not\r\nnode";
 *
 * format(CRLFinput, LF); // "deno\nis not\nnode"
 * ```
 */
export function format(content: string, eol: typeof EOL): string {
  return content.replace(regDetect, eol);
}

// denoCacheMetadata={"headers":{"x-goog-storage-class":"STANDARD","x-goog-stored-content-encoding":"identity","expires":"Mon, 06 Oct 2025 20:47:21 GMT","content-length":"1890","cross-origin-resource-policy":"cross-origin","accept-ranges":"bytes","access-control-expose-headers":"*","content-type":"text/typescript","x-content-type-options":"nosniff","last-modified":"Thu, 28 Mar 2024 00:04:29 GMT","cache-control":"public, max-age=31536000, immutable","etag":"\"e986e44a35d4cdae56931b1b4a25a1bb\"","x-guploader-uploadid":"AHmUCY0q0VhrfggkF2yxn-zFqXGFaKCa6tDgXkCfhEp-uwPaJX6bIDz1e0fwNqz1rVZNUmCPNg","x-goog-stored-content-length":"1890","x-jsr-cache-id":"MRS-e5589c6c","server":"UploadServer","content-security-policy":"default-src 'none'; script-src 'none'; style-src 'none'; img-src 'none'; font-src 'none'; connect-src 'none'; frame-src 'none'; object-src 'none'; frame-ancestors 'none'; sandbox; form-action 'none';","x-goog-generation":"1711584269861848","date":"Sun, 06 Oct 2024 20:47:21 GMT","x-goog-hash":"crc32c=3W/6Mg==,md5=6YbkSjXUza5WkxsbSiWhuw==","via":"1.1 google","x-goog-metageneration":"1","x-jsr-cache-status":"miss","x-robots-tag":"noindex","access-control-allow-origin":"*","alt-svc":"h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000"},"url":"https://jsr.io/@std/fs/0.221.0/eol.ts","time":1728247641}